
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script>
    function onShowing(e) {
        var btns = e.component.content().parent().find(".dx-button.dx-button-has-text");
        for (var i = 0; i < btns.length; i++) {
            var btn = btns[i];
            $(btn).dxButton("option", "text", i == 0 ? "Kaydet" : "Vazgeç");
        }
    }
</script>
@(Html.DevExtreme().DataGrid<TredeWeb.DataLayer.FnBarterLines>
    ()
    .DataSource(ds => ds.Mvc()
    .Controller("ApiFnBarterLine")
    .LoadAction("Get")
    .InsertAction("Post")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .Key("Id")
    )
    .ShowBorders(true)
    .ShowColumnLines(true)
    .HighlightChanges(true)
    .Paging(pagination => pagination
    .Enabled(true)
    .PageSize(5)
    )
    .RemoteOperations(true)
    .Editing(e => e
    .Mode(GridEditMode.Popup)
    .Popup(pop => pop
    .DragEnabled(false)
    .OnShowing("onShowing")
    .Position(PositionAlignment.Center)
    .Width(700)
    .Height(800)
    .Title("Banka Sırası Formu").ShowTitle(true).ShowCloseButton(true).CloseOnOutsideClick(true)
    )
    .Form(cnfg =>
    {
    cnfg.Items(itm => itm
    .AddGroup()
    .ColCount(2)
    .ColSpan(2)
    .Caption("İlk grup")
    .Items(groupItems =>
    {
    groupItems.AddSimpleFor(m => m.FinanceLineRef);
    groupItems.AddSimpleFor(m => m.FicheRef);
    groupItems.AddSimpleFor(m => m.AccountRef);
    groupItems.AddSimpleFor(m => m.Currency);
    groupItems.AddSimpleFor(m => m.Description);
    groupItems.AddSimpleFor(m => m.Description);
    groupItems.AddSimpleFor(m => m.LineDate);

    }));
    cnfg.Items(itm => itm
    .AddGroup()
    .ColCount(2)
    .ColSpan(2)
    .Caption("İkinci grup")
    .Items(groupItems =>
    {
    groupItems.AddSimpleFor(m => m.LineNr);
    groupItems.AddSimpleFor(m => m.Sign);
    groupItems.AddSimpleFor(m => m.Amount);
    groupItems.AddSimpleFor(m => m.Type);
    groupItems.AddSimpleFor(m => m.IsActive);
    groupItems.AddSimpleFor(m => m.CreatedDate);
    }));
    cnfg.ShowValidationSummary(true);
    })
    .UseIcons(true)
    .ConfirmDelete(true)
    .AllowAdding(true)
    .AllowUpdating(true)
    .AllowDeleting(true)
    )
    .Columns(columns => {


    columns.AddFor(m => m.FinanceLineRef).Caption("Finans Hattı Referansı").Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("ApiFnBarterLine").LoadAction("FnFicheLinesLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );

    columns.AddFor(m => m.FicheRef).Caption("Fiş Referansı").Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("ApiFnBarterLine").LoadAction("FnBarterFichesLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );

    columns.AddFor(m => m.AccountRef).Caption("Hesap Referansı").Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("ApiFnBarterLine").LoadAction("AccountsLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );

    columns.AddFor(m => m.Currency).Caption("Para birimi").Lookup(lookup => lookup
    .DataSource(ds => ds.WebApi().Controller("ApiFnBarterLine").LoadAction("CurrenciesLookup").Key("Value"))
    .ValueExpr("Value")
    .DisplayExpr("Text")
    );

    columns.AddFor(m => m.Description).Caption("Açıklama");

    columns.AddFor(m => m.LineDate).Caption("Satır Tarihi");

    columns.AddFor(m => m.LineNr).Caption("Satir Numara");

    columns.AddFor(m => m.Sign).Caption("İşaret");

    columns.AddFor(m => m.Amount).Caption("Miktar");

    columns.AddFor(m => m.Type).Caption("Tipi");

    columns.AddFor(m => m.IsActive).Caption("Aktif Mi");

    columns.AddFor(m => m.CreatedDate);
    }))
